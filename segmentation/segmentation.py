"""
Interface for the Mask_RCNN model.

This file contains classes for storing settings for the Mask R-CNN network
and for encapulating the functionality of the network away from any program
needing to generate the contours.
"""

import os
import numpy as np
from skimage.io import imread
from skimage.measure import find_contours

from mask_rcnn import coco
from mask_rcnn import model as modellib


class InferenceConfig(coco.CocoConfig):
    """Static class to specify the model paramaters for MASK R-CNN.

    Attributes:
        NAME (String): The name of the model config
        GPU_COUNT (int): Number of GPUs to use if multiple GPUs are supported.
        IMAGES_PER_GPU (int): Per GPU batch size.
        NUM_CLASSES (int) Number of classes in the weight file. Set at 81.

    """

    NAME = "Segmentation Config"
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1
    NUM_CLASSES = 81  # Model trained on Coco dataset.


class MaskInterface:
    """Segmentation interface for Mask RCNN.

    This class initalises and loads a new instance of the Mask R-CNN semantic
    sementation network. Additionally, the class provides bindings to make
    a prediction and to decode the results of that prediction provided by the
    network.

    If multiple MaskInterface instances are created then Mask R-CNN will
    allocate a new instance to the GPU for each one. While this will not cause
    a faliure of the GPU it will prevent the model from loading any extra
    layers into memory.

    Attributes:
        model (MaskRCNN): Instance of the Mask R-CNN model.

    """

    def __init__(self):
        """Initalise a new instance of the MaskInterface class.

        This is the constructor for the MaskInterface class which also
        initalises a new instance of the Mask R-CNN network.

        Args:
            None

        """
        # Load Mask_RCNN
        config = InferenceConfig()
        coco_path = os.path.join(os.getcwd(), "Mask_RCNN", "mask_rcnn_coco.h5")
        self.model = modellib.MaskRCNN(mode="inference", config=config,
                                       model_dir="./logs")
        self.model.load_weights(coco_path, by_name=True)

    def get_contours(self, boxes, masks, class_ids):
        """Get the semgmentation masks from the R-CNN prediction information.

        This function decodes the results of the Mask R-CNN prediction,
        filtering out unused classes and extracting data from the bounding
        boxes.

        Args:
            boxes (list): List of bounding boxes and class information.
                ([num_instance, (y1, x1, y2, x2, class_id)])
            masks (list): List of mask polygons in a channels last format.
            class_ids (list): List of class ids generated by the network.

        Returns:
            List of segmentation contours in the skimage format.

        """
        all_contours = []

        for i in range(boxes.shape[0]):
            if class_ids[i] != 1:
                continue
            mask = masks[:, :, i]
            # Pad to ensure proper polygons for masks that touch image edges.
            padded_mask = np.zeros(
                (mask.shape[0] + 2, mask.shape[1] + 2), dtype=np.uint8)
            padded_mask[1:-1, 1:-1] = mask
            contours = find_contours(padded_mask, 0.5)
            # Subtract the padding and flip (y, x) to (x, y).
            contours = [np.fliplr(verts) - 1 for verts in contours]
            all_contours.append(contours[0])
        return all_contours

    def segment_image(self, abs_image_path):
        """Find the segmentation contours of pedestrians in an image.

        Function to read an image from file and calculate the resultant
        instance aware segmentation map, representing each instance of the
        class as a skimage contour ploygon.

        Args:
            abs_image_path (String): Path to the image to be analysed as .jpg.
        Returns:
            List of segmentation contours in the skimage format.

        """
        image = imread(abs_image_path)
        results = self.model.detect([image], verbose=0)[0]
        contours = self.get_contours(results['rois'], results['masks'],
                                     results['class_ids'])
        return contours
